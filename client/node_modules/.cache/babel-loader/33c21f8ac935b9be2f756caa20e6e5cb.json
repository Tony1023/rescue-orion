{"ast":null,"code":"var _jsxFileName = \"/Users/raz/Desktop/rescue-orion/client/src/room/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport GameBoard from './GameBoard';\nimport SocketContext from './game-context';\nimport { RoomSocketMessage } from '../metadata/types';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport SocketIOClient from 'socket.io-client';\nimport queryString from 'query-string';\nimport axios from 'axios';\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: black;\n  }\n`;\nconst SocketError = styled.div`\n  background-color: rgb(240, 240, 240);\n  font-size: 18px;\n  display: inline-block;\n  padding: 5px;\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translate(-50%, 0);\n  z-index: 100;\n`;\nexport default (props => {\n  const {\n    lobby,\n    room\n  } = queryString.parse(props.location.search);\n  const [socket, setSocket] = useState();\n  const [gameState, setGameState] = useState();\n\n  async function setup() {\n    try {\n      await axios.post('http://localhost:9000/rooms', {\n        lobby: lobby,\n        room: room\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    let newSocket = SocketIOClient('http://localhost:9000', {\n      path: '/rooms/socket',\n      query: {\n        lobby: lobby,\n        room: room\n      },\n      reconnection: false\n    });\n    setSocket(newSocket);\n    newSocket.on(RoomSocketMessage.StateUpdate, data => {\n      const message = JSON.parse(data);\n      const newState = message;\n      setGameState(newState);\n    });\n    newSocket.on('disconnect', () => {\n      setSocket(undefined);\n    });\n    newSocket.on('connect_error', () => {\n      setSocket(undefined);\n    });\n  }\n\n  useEffect(() => {\n    if (!lobby || !room) {\n      return;\n    }\n\n    setup();\n  }, [lobby, room]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }), socket ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(SocketError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"Cannot connect to Rescue Orion server... Try refreshing the page or report to your commander!\"), gameState ? /*#__PURE__*/React.createElement(SocketContext.Provider, {\n    value: {\n      socket: socket,\n      gameState: gameState\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GameBoard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"Loading\"));\n});\nexport function DevRoom() {\n  const [socket, setSocket] = useState();\n  const [gameState, setGameState] = useState();\n\n  async function setup() {\n    let newSocket = SocketIOClient('http://localhost:9000', {\n      path: '/dev',\n      reconnection: false\n    });\n    setSocket(newSocket);\n    newSocket.on(RoomSocketMessage.StateUpdate, data => {\n      const message = JSON.parse(data);\n      const newState = message;\n      setGameState(newState);\n    });\n    newSocket.on('disconnect', () => {\n      setSocket(undefined);\n    });\n    newSocket.on('connect_error', () => {\n      setSocket(undefined);\n    });\n  }\n\n  useEffect(() => {\n    setup();\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GlobalStyle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }), socket ? /*#__PURE__*/React.createElement(React.Fragment, null) : /*#__PURE__*/React.createElement(SocketError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }, \"Cannot connect to Rescue Orion server... Try refreshing the page or report to your commander!\"), gameState ? /*#__PURE__*/React.createElement(SocketContext.Provider, {\n    value: {\n      socket: socket,\n      gameState: gameState\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GameBoard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, \"Loading\"));\n}","map":{"version":3,"sources":["/Users/raz/Desktop/rescue-orion/client/src/room/index.tsx"],"names":["React","useState","useEffect","GameBoard","SocketContext","RoomSocketMessage","styled","createGlobalStyle","SocketIOClient","queryString","axios","GlobalStyle","SocketError","div","props","lobby","room","parse","location","search","socket","setSocket","gameState","setGameState","setup","post","err","console","log","newSocket","path","query","reconnection","on","StateUpdate","data","message","JSON","newState","undefined","DevRoom"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GameBoard from './GameBoard';\nimport SocketContext from './game-context';\nimport { GameState, RoomSocketMessage } from '../metadata/types';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport SocketIOClient from 'socket.io-client';\nimport { Location } from 'history';\nimport queryString from 'query-string';\nimport axios from 'axios';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: black;\n  }\n`;\n\nconst SocketError = styled.div`\n  background-color: rgb(240, 240, 240);\n  font-size: 18px;\n  display: inline-block;\n  padding: 5px;\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translate(-50%, 0);\n  z-index: 100;\n`;\n\nexport default (props: {\n  location: Location,\n}) => {\n  const { lobby, room } = queryString.parse(props.location.search);\n\n  const [socket, setSocket] = useState<SocketIOClient.Socket>();\n  const [gameState, setGameState] = useState<GameState>();\n\n  async function setup() {\n    try {\n      await axios.post('http://localhost:9000/rooms', {\n        lobby: lobby,\n        room: room,\n      });\n    } catch(err) {\n      console.log(err);\n    }\n\n    let newSocket = SocketIOClient('http://localhost:9000', {\n      path: '/rooms/socket',\n      query: {\n        lobby: lobby,\n        room: room,\n      },\n      reconnection: false,\n    });\n    setSocket(newSocket);\n\n    newSocket.on(RoomSocketMessage.StateUpdate, (data: string) => {\n      const message = JSON.parse(data);\n      const newState = message as GameState;\n      setGameState(newState);\n    });\n\n    newSocket.on('disconnect', () => {\n      setSocket(undefined);\n    });\n\n    newSocket.on('connect_error', () => {\n      setSocket(undefined);\n    });\n  }\n\n  useEffect(() => {\n    if (!lobby || !room) {\n      return;\n    }\n    setup();\n  }, [lobby, room]);\n\n  return <>\n    <GlobalStyle />\n    {\n      socket ?\n      <></>\n      :\n      <SocketError>\n        Cannot connect to Rescue Orion server... Try refreshing the page or report to your commander!\n      </SocketError>\n    }  \n    {\n      gameState ?\n      (\n        <SocketContext.Provider value={{\n          socket: socket,\n          gameState: gameState,\n        }}>\n          <GameBoard />\n        </SocketContext.Provider>\n      )\n      :\n      (\n        <div>Loading</div>\n      )\n    }\n  </>\n}\n\nexport function DevRoom() {\n  const [socket, setSocket] = useState<SocketIOClient.Socket>();\n  const [gameState, setGameState] = useState<GameState>();\n\n  async function setup() {\n    let newSocket = SocketIOClient('http://localhost:9000', {\n      path: '/dev',\n      reconnection: false,\n    });\n    setSocket(newSocket);\n\n    newSocket.on(RoomSocketMessage.StateUpdate, (data: string) => {\n      const message = JSON.parse(data);\n      const newState = message as GameState;\n      setGameState(newState);\n    });\n\n    newSocket.on('disconnect', () => {\n      setSocket(undefined);\n    });\n\n    newSocket.on('connect_error', () => {\n      setSocket(undefined);\n    });\n  }\n\n  useEffect(() => {\n    setup();\n  }, []);\n\n  return <>\n    <GlobalStyle />\n    {\n      socket ?\n      <></>\n      :\n      <SocketError>\n        Cannot connect to Rescue Orion server... Try refreshing the page or report to your commander!\n      </SocketError>\n    }  \n    {\n      gameState ?\n      (\n        <SocketContext.Provider value={{\n          socket: socket,\n          gameState: gameState,\n        }}>\n          <GameBoard />\n        </SocketContext.Provider>\n      )\n      :\n      (\n        <div>Loading</div>\n      )\n    }\n  </>\n}"]},"metadata":{},"sourceType":"module"}